#!/usr/bin/env bash
set -Eueo pipefail
# shellcheck disable=SC1090
source "${RRCONFINC}"

if (( RRUID != 0 )); then
  fail debootstrap can only run as root
fi

detectCodename() {
  # shellcheck disable=SC1091
  source /etc/os-release &>/dev/null || true
  echo "${VERSION_CODENAME:-bookworm}"
}

# shellcheck disable=SC2317
trapExit() {
  saveDebootstrapLog
  test -d "$target" &&
    rm -rf "$target"
}

saveDebootstrapLog() {
  test -f "$target/debootstrap/debootstrap.log" &&
    cp -f "$target/debootstrap/debootstrap.log" "${DBS_IMAGE%%.tgz}-debootstrap.log"
  return 0
}

: DBS_BUILD_DIR="${DBS_BUILD_DIR:=$HOME}"
: DBS_BUILD_DIR="$(realpath -e "$DBS_BUILD_DIR")"
: DBS_ARCH="${DBS_ARCH:=$(dpkg --print-architecture)}"
: DBS_CODENAME="${DBS_CODENAME:=$(detectCodename)}"
: DBS_IMAGE="${DBS_IMAGE:=$DBS_BUILD_DIR/$DBS_CODENAME-$DBS_ARCH.tgz}"
: DBS_IMAGE="$(realpath "$DBS_IMAGE")"
: DBS_INCLUDE="${DBS_INCLUDE:=pkg.include}"
: DBS_INCLUDE="$(realpath -e "$DBS_INCLUDE")"
: DBS_EXCLUDE="${DBS_EXCLUDE:=pkg.exclude}"
: DBS_EXCLUDE="$(realpath -e "$DBS_EXCLUDE")"

target="$(mktemp -d "$DBS_BUILD_DIR/dbs.XXXX")"
trap trapExit EXIT

include="$(sort -u "$DBS_INCLUDE")"
include="${include//$'\n'/,}"
exclude="$(sort -u "$DBS_EXCLUDE")"
exclude="${exclude//$'\n'/,}"

# remove potentialy obsolete log
rm -f "${DBS_IMAGE%%.tgz}-debootstrap.log"

# note: http_proxy and https_proxy are honored by debootstrap
debootstrap --arch="$DBS_ARCH" --variant=minbase --merged-usr --verbose \
  --include="$include" --exclude="$exclude" "$DBS_CODENAME" "$target"

saveDebootstrapLog

echo root:root | chpasswd --root "$target"
printf 'pts/0\npts/1\n' >> "$target/etc/securetty"
printf 'LANG=en_US.UTF-8\n' >> "$target/etc/default/locale"
printf 'en_US.UTF-8 UTF-8\n' >> "$target/etc/locale.gen"

chroot "$target" dpkg-reconfigure locales
chroot "$target" systemctl enable systemd-networkd

(cd "$target" && tar --numeric-owner -cf - . ) | gzip -9 > "$DBS_IMAGE"
exit 0
